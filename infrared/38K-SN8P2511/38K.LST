     1  000000             //*******************************************************************************
     2  000000             //
     3  000000             // Project NO.--->: x-10 signal generator
     4  000000             // Project Name-->: canbus-x10
     5  000000             // Customer------>:
     6  000000             // Author-------->: zhanglong
     7  000000             // Date---------->: 2014/9/18 16:28
     8  000000             // IC body------->: SN8P2511
     9  000000             // REVISION------>:
    10  000000             //                                       for SN8ICE 2K
    11  000000             //*******************************************************************************
    12  000000             //*  (c) Copyright 
    13  000000             //*******************************************************************************
    14  000000             
    15  000000             CHIP	SN8P2511		//the selector for program into the chip.
    16  000000             //CHIP	SN8P2501B		//Select the chip for emulate 2511 on plus II.
    17  000000             //{{SONIX_CODE_OPTION
    18  000000             	.Code_Option	Noise_Filter	Disable
    19  000000               .Code_Option     Security     Enable
    20  000000             	.Code_Option	Fcpu		#2     ; Fcpu = Fosc/4
    21  000000             
    22  000000               .Code_Option     High_Clk     IHRC_16M
    23  000000             	.Code_Option	Watch_Dog	Always_On
    24  000000               .Code_Option     Reset_Pin     P11
    25  000000             	.Code_Option	LVD		LVD_L		; 2.0V Reset
    26  000000             //}}SONIX_CODE_OPTION
    27  000000             
    28  000000             //-------------------------------------------------------------------------------
    29  000000             //			Include Files
    30  000000             //-------------------------------------------------------------------------------
    31  000000             	
    32  000000             //-------------------------------------------------------------------------------
    33  000000             //			Constants Definition
    34  000000             //-------------------------------------------------------------------------------
    35  000000             
    36  E 00000070         C_TC0_Rt		 equ		#0x70	    //Set TC0M Value
    37  E 00000074         C_TC0_CNT		 equ		#116	    //Set TC0C Value,70us
    38  000000             
    39  000000             
    40  E 00000003         RXL_HI0    equ  3
    41  E 00000009         RXL_HI1    equ  9
    42  E 0000000A         RXL_LOW0   equ  10
    43  E 00000016         RXL_LOW1   equ  22
    44  000000             
    45  E 00000007         RXH_HI0    equ  7
    46  E 00000012         RXH_HI1    equ  18
    47  E 00000004         RXH_LOW0   equ  4
    48  E 0000000A         RXH_LOW1   equ  10
    49  000000             
    50  E 00000032         RX_HEAD_HI    equ #50
    51  000000             
    52  E 000000D2         CNT_10MS      equ #210       //143*70us=10ms
    53  E 00000032         CNT_01S        equ #50       //50*10ms=0.1s
    54  000000             
    55  000000             
    56  000000             //----------------------------
    57  000000             //	Pin Definition
    58  000000             //----------------------------
    59  E 000000D2         PinB0 equ P2.0
    60  E 000100D2         PinB1 equ P2.1
    61  E 000200D2         PinB2 equ P2.2
    62  E 000300D2         PinB3 equ P2.3
    63  E 000400D2         PinB4 equ P2.4
    64  E 000400D5         PinRx equ P5.4
    65  E 000000D0         PinOpen     equ   P0.0
    66  E 000000D1         PinClose    equ   P1.0
    67  000000             
    68  000000             
    69  000000             //-------------------------------------------------------------------------------
    70  000000             //			Variables Definition
    71  000000             //-------------------------------------------------------------------------------
    72  000000             .DATA
    73  000000             		org	0h			//Data section start from RAM address 0
    74  000000             	//Wk00		  DS	1			//Temporary buffer for main loop
    75  000000             	//Iwk00		  DS	1			//Temporary buffer for ISR
    76  0000 D             	AccBuf		    DS 1		//Accumulater buffer
    77  0001 D             	PflagBuf	    DS 1		//PFLAG buffer
    78  0002 D             	flag0         DS 1
    79  0003 D             	cntRdEep      DS 1
    80  0004 D               buf1          DS 1     //main loop data buf
    81  0005 D               cntRxHi       DS 1    //高电平计数器
    82  0006 D               cntRxLo       DS 1    //低电平计数器
    83  0007 D               rx_bit        DS 1    //RX BIT BUF
    84  0008 D               pre_bit       DS 1    //前一位缓存,作判断上升沿与下降沿用
    85  0009 D               rx_bit_buf0   DS 1    //位缓存,防抖动用
    86  000A D               rx_bit_buf1   DS 1    //位缓存,防抖动用
    87  000B D               rx_bit_buf2   DS 1    //位缓存,防抖动用
    88  000C D               RxDataBuf0    DS 1    //接收数据缓存
    89  000D D               RxData0       DS 1    //接收数据
    90  00000E               
    91  000E D               PointRx       DS 1    //接收位指针
    92  000F D               PointDataBit  DS 1    //接收数据位指针
    93  0010 D               CntTestHead   ds 1
    94  0011 D               testbuf       ds 1
    95  000012               
    96  000012               
    97  0012 D               cnt70us       ds 1
    98  0013 D               cnt10ms       ds 1
    99  000014             
   100  0014 D               delayloop      ds 1
   101  000015             
   102  000015               
   103  000015             //-------------------------------------------------------------------------------
   104  000015             //			Bit Variables Definition
   105  000015             //-------------------------------------------------------------------------------
   106  000015             
   107  E 00000002         	f_01s      EQU     flag0.0
   108  E 00010002         	f_10ms     EQU     flag0.1
   109  E 00050002         	f_lo_hi     EQU     flag0.5       //rx low to hight level change flag
   110  E 00060002         	f_rx_data   EQU     flag0.6       //RX data buf
   111  E 00070002         	f_rx_finish EQU     flag0.7
   112  E 00000007         	bit_buf     EQU     rx_bit.0      //RF rx bit buf
   113  000015             
   114  000015             
   115  000015             //-------------------------------------------------------------------------------
   116  000015             //			Code section
   117  000015             //-------------------------------------------------------------------------------
   118  000000             .CODE								
   119  000000             	ORG	0				      //Code section start
   120  000000   8010(2)  	jmp		Reset				//Reset vector
   121  000001             							      //Address 4 to 7 are reserved
   122  000008             	ORG	8				
   123  000008   802F(2)  	jmp		Isr				  //Interrupt vector
   124  000010             	ORG	10h
   125  000010             //-------------------------------------------------------------------------------
   126  000010             // 			Program reset section
   127  000010             //-------------------------------------------------------------------------------
   128  000010             Reset:
   129  000010   2D7F(1)  	mov 	    A,#07Fh				  //Initial stack pointer and
   130  000011   2FDF(1)    b0mov 		STKP,A				  //disable global interrupt	
   131  000012   2B86(1)  	clr		    PFLAG				    //pflag = x,x,x,x,x,c,dc,z
   132  000013   2D00(1)  	mov     	A,#00h				  //Initial system mode
   133  000014   2FCA(1)  	b0mov   	OSCM,A
   134  000015   2D5A(1)  	mov		    A, #0x5A
   135  000016   2FCC(1)  	b0mov		  WDTR, A				  //Clear watchdog timer	
   136  000017   C053(2)    call    	ClrRAM				  //Clear RAM
   137  000018   C03C(2)    call    	SysInit				  //System initial
   138  000019   6FDF(1)    b0bset  	FGIE				    //Enable global interrupt
   139  00001A             //-------------------------------------------------------------------------------
   140  00001A             // 			Main routine
   141  00001A             //-------------------------------------------------------------------------------
   142  00001A             //----------------------------------------------------------------------
   143  00001A             //----------------------------------------------------------------------
   144  00001A             //----------------------enable tc0---------------------
   145  00001A   2D70(1)  mov a,#01110000b
   146  00001B   2FDA(1)  b0mov  tc0m,a
   147  00001C             //mov a,#1
   148  00001C   2D08(1)  mov a,#8
   149  00001D             //mov a,#9
   150  00001D             //mov a,#10
   151  00001D             //mov a,#12
   152  00001D             //mov a,#14
   153  00001D             //mov a,#16
   154  00001D             //mov a,#32
   155  00001D             //mov a,#63
   156  00001D   2FDB(1)  b0mov tc0c,a
   157  00001E   2FCD(1)  b0mov tc0r,a
   158  00001F             
   159  00001F             //b0bset ftc0out
   160  00001F             //b0bset faload0
   161  00001F             //b0bset fpwm0out
   162  00001F             
   163  00001F             
   164  00001F             //b0bset ftc0enb
   165  00001F   6CC5(1)  b0bset P5M.4
   166  000020   64D5(1)  b0bclr P5.4
   167  000021             
   168  000021             
   169  000021             Main:
   170  000021               mov_		WDTR,#0x5a				//Clear watchdog timer
   171  000021   2D5A(1)  	mov	a, #0x5a
   172  000022   1FCC(1)  	mov	WDTR, a
   173  000023   70D0(1+S)    b0bts0 P0.0
   174  000024   802C(2)    jmp @f
   175  000025             
   176  000025   64D5(1)  b0bclr P5.4	/** followed 32 nop **/
   177  000026             
   178  000026             //mov	a, #3
   179  000026   2D0E(1)  mov	a, #14
   180  000027   C05B(2)  call dlay
   181  000028             //nop
   182  000028             
   183  000028   6CD5(1)  b0bset P5.4	/** followed 25 nop **/
   184  000029             
   185  000029             //mov	a, #1
   186  000029   2D0E(1)  mov	a, #14
   187  00002A   C05B(2)  call dlay
   188  00002B             //nop
   189  00002B             
   190  00002B   802E(2)    jmp     EndMain
   191  00002C             @@:
   192  00002C             	/** idle state **/
   193  00002C             	//b0bset P5.4
   194  00002C   64D5(1)  	b0bclr P5.4
   195  00002D             //----------------------------------------------------
   196  00002D   802E(2)    jmp     EndMain
   197  00002E             EndMain:
   198  00002E   8021(2)  	jmp Main
   199  00002F             
   200  00002F             //-------------------------------------------------------------------------------
   201  00002F             // Isr (Interrupt Service Routine)
   202  00002F             //-------------------------------------------------------------------------------
   203  00002F             Isr:
   204  00002F             //-----------------------------------
   205  00002F             // Save ACC
   206  00002F             //-----------------------------------
   207  00002F   0200(1)  	b0xch	  A,AccBuf	  //B0xch instruction do not change C,Z flag
   208  000030   2E86(1)  	b0mov   A,PFLAG
   209  000031   2F01(1)    b0mov   PflagBuf,A
   210  000032             //-----------------------------------
   211  000032             // Interrupt service routine  
   212  000032             //-----------------------------------
   213  000032             INTTC0CHK:						// Check TC0 interrupt request
   214  000032   7DC9(1+S)  	B0BTS1	FTC0IEN			// Check TC0IEN
   215  000033   8036(2)  	JMP	    INT_EXIT		// Jump to exit of IRQ
   216  000034   75C8(1+S)  	B0BTS0	FTC0IRQ			// Check TC0IRQ
   217  000035   803A(2)  	JMP	    INTTC0			// Jump to TC0 interrupt service routine
   218  000036             //-----------------------------------
   219  000036             // Exit interrupt service routine
   220  000036             //-----------------------------------
   221  000036             INT_EXIT:
   222  000036   2E01(1)    b0mov   A, PflagBuf
   223  000037   2F86(1)  	b0mov   PFLAG, A			//Restore the PFlag
   224  000038   0200(1)  	b0xch		A,AccBuf			//Restore the Reg. A
   225  000039             					              //B0xch instruction do not change C,Z flag
   226  000039   0F00(2)  	reti						      //Exit the interrupt routine
   227  00003A             //-------------------------------------------------------------------------------
   228  00003A             //	TC0 interrupt service routine
   229  00003A             //-------------------------------------------------------------------------------
   230  00003A             INTTC0:                //100us timer
   231  00003A   65C8(1)  	b0bclr	FTC0IRQ
   232  00003B             //-----------------------------------------------------------
   233  00003B             //                     开始数据接收
   234  00003B             //-----------------------------------------------------------
   235  00003B             	//incms testbuf
   236  00003B             	//nop
   237  00003B             	//nop
   238  00003B             	//B2P   testbuf.0,PinTST
   239  00003B   8036(2)  	jmp	INT_EXIT
   240  00003C             //-------------------------------------------------------------------------------
   241  00003C             // SysInit
   242  00003C             // System initial to define Register, RAM, I/O, Timer......
   243  00003C             //-------------------------------------------------------------------------------
   244  00003C             SysInit:
   245  00003C             	SysInitT0:
   246  00003C   64C9(1)  	b0bclr		FT0IEN
   247  00003D   64C8(1)  	b0bclr		FT0IRQ
   248  00003E   67D8(1)  	b0bclr		FT0ENB
   249  00003F             SysInitTC0:	
   250  00003F             	
   251  00003F             SysInitP00:	
   252  00003F   60C9(1)  	b0bclr		FP00IEN
   253  000040             	
   254  000040             //--------------------------------------------------------------------------
   255  000040             SysInitPort:
   256  000040             //	b0bset PinPwr
   257  000040             SysInitPortMode:	
   258  000040   2DFF(1)  	mov    a,#0xff
   259  000041   2FC5(1)  	b0mov    P5M,a
   260  000042   2DFF(1)  	mov    a,#0xff
   261  000043   2FC2(1)  	b0mov    P2M,a
   262  000044   2D01(1)  	mov    a,#0x01
   263  000045   2FC1(1)  	b0mov    P1M,a
   264  000046   2D00(1)  	mov    a,#0x00
   265  000047   2FB8(1)  	b0mov    P0M,a
   266  000048             SysInitPortDataBuffer:
   267  000048   2D00(1)    mov    a,#0x00
   268  000049   2FD5(1)    b0mov    P5,a
   269  00004A   2FD2(1)    b0mov    P2,a
   270  00004B   2FD1(1)    b0mov    P1,a
   271  00004C             SysInitPortPullUp:
   272  00004C   2DFF(1)  	mov  a,#0xff
   273  00004D   2FE0(1)  	b0mov  P0UR,a
   274  00004E   2FE1(1)  	b0mov  P1UR,a
   275  00004F             	
   276  00004F             	
   277  00004F   2D00(1)  	mov  a,#0x00
   278  000050   2FE2(1)  	b0mov  P2UR,a
   279  000051   2FE5(1)  	b0mov  P5UR,a
   280  000052             SysInitRAM:
   281  000052   0E00(2)  	ret
   282  000053             
   283  000053             //-------------------------------------------------------------------------------
   284  000053             // ClrRAM
   285  000053             // Use index @YZ to clear RAM (00h~2Fh)
   286  000053             //-------------------------------------------------------------------------------
   287  000053             ClrRAM:
   288  000053   2B84(1)  	clr 		Y		 
   289  000054   2D7F(1)  	mov		A, #0x7f
   290  000055   2F83(1)  	b0mov		Z, A				  //Set @YZ address from 2fh
   291  000056             ClrRAM10:
   292  000056   2BE7(1)  	clr 		@YZ				    //Clear @YZ content
   293  000057   2683(1+S)  	decms		Z   				  //z = z - 1 , skip next if z=0
   294  000058   8056(2)  	jmp 		ClrRAM10 
   295  000059   2BE7(1)  	clr 		@YZ				    //Clear address $00
   296  00005A   0E00(2)  	ret
   297  00005B             //-------------------------------------------------------------------------------
   298  00005B             /*******************************************************************************
   299  00005B              * delay
   300  00005B              * description:
   301  00005B              * input:  a
   302  00005B              * output: a
   303  00005B              *  
   304  00005B              *
   305  00005B              *******************************************************************************/
   306  00005B             dlay:
   307  00005B   2F83(1)  	b0mov Z, A
   308  00005C             dlayLoop:
   309  00005C   2683(1+S)  	decms	Z 
   310  00005D   805C(2)  	jmp		dlayLoop
   311  00005E             
   312  00005E   0E00(2)  	ret
   313  00005F             //**********************************************************		
   314  00005F             //-------------------------------------------------------------------------------
   315  00005F             //**********************************************************		
   316  00005F             //-------------------------------------------------------------------------------
   317  00005F             	ENDP
